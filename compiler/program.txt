//Tanishq Chejara
%{
#include <stdio.h>
%}

%%

int|float|char|void  { printf("'%s' is a keyword.\n", yytext); }
[a-zA-Z][a-zA-Z0-9]* { printf("'%s' is not a keyword.\n", yytext); }
.                     { printf("Invalid input.\n"); }

%%

int yywrap() {
    return 1;
}

int main() {
    yylex();
    return 0;
}


#####  OUTPUT  ####:
└─$ ./lexer1
dog
'dog' is not a keyword.

fox
'fox' is not a keyword.

if
'if' is not a keyword.

IF
'IF' is not a keyword.

void
'void' is a keyword.



//Tanishq chejaraA
%{
#include <stdio.h>
#include <string.h>

int keyword_count = 0;

// Function to check if a given string is a keyword
int isKeyword(char *str) {
    char keywords[4][10] = {"int", "float", "char", "void"};
    for (int i = 0; i < 4; i++) {
        if (strcmp(str, keywords[i]) == 0)
            return 1; // If match found, return 1 (true)
    }
    return 0; // If no match found, return 0 (false)
}
%}

%%
{isKeyword(yytext)} { keyword_count++; }
.                     ;

%%

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }

    yyin = file; // Set input to file
    yylex(); // Start lexical analysis

    printf("Total number of keywords: %d\n", keyword_count);

    fclose(file);
    return 0;
}


└─$ ./lexer2 < temp.txt

Total number of keywords: 2



%{
#include <stdio.h>
int operator_count = 0;
%}

%%

[+\-*/=<>!&|^%]  { operator_count++; }
.                 { /* Ignore other characters */ }

%%

int yywrap() {
    printf("Total number of operators: %d\n", operator_count);
    return 1;
}

int main() {
    yylex();
    return 0;
}

EXAMPLE"
#include <stdio.h>

int main() {
    int a = 10;
    int b = 20;
    int sum = a + b;
    printf("Sum: %d\n", sum);
    return 0;
}


└─$ ./lexer3 < temp.txt

Total number of operators: 7

//Tanishq Chejara
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_CHARACTERS 256
int char_count[MAX_CHARACTERS] = {0};
%}

%%

. { char_count[(int)yytext[0]]++; }
\n { /* Ignore newline characters */ }

%%

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    FILE *file = fopen(argv[1], "r");
    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    int c;
    yyin = file;
    yylex();

    fclose(file);

    printf("Character Counts:\n");
    for (int i = 0; i < MAX_CHARACTERS; i++) {
        if (char_count[i] > 0) {
            printf("'%c': %d\n", (char)i, char_count[i]);
        }
    }

    return 0;
}


└─$ ./lexer4 temp.txt
Character Counts:
' ': 1
'!': 1
',': 1
'H': 1
'd': 1
'e': 1
'l': 3
'o': 2
'r': 1
'w': 1


//Tanishq Chejara
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SYMBOLS 100

typedef struct {
    char name[50];
    int value;
} Symbol;

Symbol symbolTable[MAX_SYMBOLS];
int symbolCount = 0;

void insertSymbol(const char *name, int value) {
    if (symbolCount < MAX_SYMBOLS) {
        strcpy(symbolTable[symbolCount].name, name);
        symbolTable[symbolCount].value = value;
        symbolCount++;
        printf("Inserted: %s\n", name);
    } else {
        printf("Symbol table full. Cannot insert.\n");
    }
}

void deleteSymbol(const char *name) {
    int i;
    for (i = 0; i < symbolCount; i++) {
        if (strcmp(symbolTable[i].name, name) == 0) {
            printf("Deleted: %s\n", name);
            for (int j = i; j < symbolCount - 1; j++) {
                strcpy(symbolTable[j].name, symbolTable[j + 1].name);
                symbolTable[j].value = symbolTable[j + 1].value;
            }
            symbolCount--;
            return;
        }
    }
    printf("Symbol '%s' not found.\n", name);
}

void displaySymbolTable() {
    printf("Symbol Table:\n");
    printf("Name\tValue\n");
    for (int i = 0; i < symbolCount; i++) {
        printf("%s\t%d\n", symbolTable[i].name, symbolTable[i].value);
    }
}

int main() {
    insertSymbol("x", 10);
    insertSymbol("y", 20);
    insertSymbol("z", 30);

    displaySymbolTable();

    deleteSymbol("y");

    displaySymbolTable();

    return 0;
}

└─$ ./lexer5
Inserted: x
Inserted: y
Inserted: z
Symbol Table:
Name    Value
x       10
y       20
z       30
Deleted: y
Symbol Table:
Name    Value
x       10
z       30

//Tanishq Chejara
%{
#include <stdio.h>
#include <string.h>
%}

%option noyywrap

%%

^[1-9][0-9]{9}$           { printf("Valid mobile number: %s\n", yytext); }
((http|https):\/\/)?      { printf("Valid URL: %s\n", yytext); }
[a-zA-Z_][a-zA-Z0-9_]*    { printf("Valid identifier: %s\n", yytext); }
(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[012])\/\d{4}  { printf("Valid date: %s\n", yytext); }
([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]          { printf("Valid time: %s\n", yytext); }
.                          { printf("Invalid input.\n"); }

%%

int main() {
    yylex();
    return 0;
}


└─$ ./lexer6
3456127809
Valid mobile number: 3456127809

variable123
Valid identifier: variable123


23:59:59
Valid time: 23:59:59





//Tanishq Chejara
%{
#include <stdio.h>
int space_count = 0;
int word_count = 0;
int line_count = 0;
%}

%option noyywrap

%%

[ \t]   { space_count++; }
\n      { line_count++; }
[a-zA-Z]+   { word_count++; }

%%

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }

    yyin = file;
    yylex();

    fclose(file);

    printf("Blank Spaces: %d\n", space_count);
    printf("Words: %d\n", word_count);
    printf("Lines: %d\n", line_count);

    return 0;
}


└─$ ./lexer7 temp.txt
...Blank Spaces: 11
Words: 14
Lines: 4

//Tanishq Chejara
%{
#include <stdio.h>
int vowel_count = 0;
int consonant_count = 0;
%}

%option noyywrap

%%

[a-zA-Z] {
    if (yytext[0] == 'a' || yytext[0] == 'e' || yytext[0] == 'i' || yytext[0] == 'o' || yytext[0] == 'u' || yytext[0] == 'A' || yytext[0] == 'E' || yytext[0] == 'I' || yytext[0] == 'O' || yytext[0] == 'U') {
        vowel_count++;
    } else {
        consonant_count++;
    }
}

. ;  // Ignore everything else

%%

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror("Error opening file");
        return 1;
    }

    yyin = file;
    yylex();

    fclose(file);

    printf("Vowel count: %d\n", vowel_count);
    printf("Consonant count: %d\n", consonant_count);

    return 0;
}


└─$ ./lexer8 temp.c

Vowel count: 14
Consonant count: 29


exp 9
lexer.l
%{
/* Definition section */
#include "y.tab.h"
%}

/* Rule Section */
%%
[aA] {return A;}
[bB] {return B;}
\n {return NL;}
. {return yytext[0];}
%%

int yywrap()
{
    return 1;
}

parser.y

%{
/* Definition section */
#include <stdio.h>
#include <stdlib.h>
int yyerror(char *msg);
%}

%token A B NL

/* Rule Section */
%%
stmt: S NL { printf("valid string\n"); exit(0); }
     ;

S: A S B |
  ;

%%

int yyerror(char *msg)
{
    printf("invalid string\n");
    exit(0);
}

// driver code
int main()
{
    printf("enter the string\n");
    yyparse();
    return 0;
}


┌──(goat@sheep)-[/home/fox]
└─$ lex exp9comp.l

┌──(goat@sheep)-[/home/fox]
└─$ yacc -d exp9comp.y

┌──(goat@sheep)-[/home/fox]
└─$ gcc lex.yy.c y.tab.c
y.tab.c: In function ‘yyparse’:
y.tab.c:1019:16: warning: implicit declaration of function ‘yylex’ [-Wimplicit-function-declaration]
 1019 |       yychar = yylex ();
      |                ^~~~~

┌──(goat@sheep)-[/home/fox]
└─$ ./a.out 
enter the string
aabb
valid string

┌──(goat@sheep)-[/home/fox]
└─$ ./a.out 
enter the string
aaaabbbb
valid string

┌──(goat@sheep)-[/home/fox]
└─$ ./a.out 
enter the string
aavf
invalid string



Exp 10

lexer

%{
/* Definition section */
#include "y.tab.h"
%}

%%
[0-9]+ {
    yylval = atoi(yytext);
    return NUMBER;
}

[a-zA-Z]+ { return ID; }
[ \t]+ ; /* For skipping whitespaces */
\n { return 0; }
. { return yytext[0]; }
%%

int yywrap() {
    return 1; /* Return 1 to indicate the end of input */
}

parser

%{
/* Definition section */
#include <stdio.h>
int yyerror(char *msg);
int yylval; /* Declare yylval here */
%}

%token NUMBER ID

// setting the precedence
// and associativity of operators
%left '+' '-'
%left '*' '/'

/* Rule Section */
%%
E : T {
    printf("Result = %d\n", $$);
    return 0;
}

T :
    T '+' T { $$ = $1 + $3; }
    | T '-' T { $$ = $1 - $3; }
    | T '*' T { $$ = $1 * $3; }
    | T '/' T { $$ = $1 / $3; }
    | '-' NUMBER { $$ = -$2; }
    | '-' ID { $$ = -$2; }
    | '(' T ')' { $$ = $2; }
    | NUMBER { $$ = $1; }
    | ID { $$ = $1; };

%%

int yyerror(char* s) {
    printf("\nExpression is invalid\n");
}

int main() {
    printf("Enter the expression\n");
    yyparse();
}

──(goat@sheep)-[/home/fox]
└─$ lex exp10comp.l

┌──(goat@sheep)-[/home/fox]
└─$ yacc -d exp10comp.y

┌──(goat@sheep)-[/home/fox]
└─$ gcc lex.yy.c y.tab.c
y.tab.c: In function ‘yyparse’:
y.tab.c:1031:16: warning: implicit declaration of function ‘yylex’ [-Wimplicit-function-declaration]
 1031 |       yychar = yylex ();
      |                ^~~~~

┌──(goat@sheep)-[/home/fox]
└─$ ./a.out 
Enter the expression
5+6-8 
Result = 3

┌──(goat@sheep)-[/home/fox]
└─$ ./a.out 
Enter the expression
(4/2)*((8+2)-5)
Result = 10


Exp 11

#include <ctype.h>
#include <stdio.h>
#include <string.h>

// Functions to calculate Follow
void followfirst(char, int, int);
void follow(char c);

// Function to calculate First
void findfirst(char, int, int);

int count, n = 0;

// Stores the final result
// of the First Sets
char calc_first[10][100];

// Stores the final result
// of the Follow Sets
char calc_follow[10][100];

int m = 0;

// Stores the production rules
char production[10][10];
char f[10], first[10];
int k;
char ck;
int e;

int main(int argc, char** argv)
{
    int jm = 0;
    int km = 0;
    int i, choice;
    char c, ch;
    count = 8;

    // The Input grammar
    strcpy(production[0], "X=TnS");
    strcpy(production[1], "X=Rm");
    strcpy(production[2], "T=q");
    strcpy(production[3], "T=#");
    strcpy(production[4], "S=p");
    strcpy(production[5], "S=#");
    strcpy(production[6], "R=om");
    strcpy(production[7], "R=ST");

    int kay;
    char done[count];
    int ptr = -1;

    // Initializing the calc_first array
    for (k = 0; k < count; k++) {
        for (kay = 0; kay < 100; kay++) {
            calc_first[k][kay] = '!';
        }
    }

    int point1 = 0, point2, xxx;

    // Calculation of First
    for (k = 0; k < count; k++) {
        c = production[k][0];
        point2 = 0;
        xxx = 0;
        // Checking if First of c has
        // already been calculated
        for (kay = 0; kay <= ptr; kay++)
            if (c == done[kay])
                xxx = 1;
        if (xxx == 1)
            continue;
        // Function call
        findfirst(c, 0, 0);
        ptr += 1;
        // Adding c to the calculated list
        done[ptr] = c;
        printf("\n First(%c) = { ", c);
        calc_first[point1][point2++] = c;
        // Printing the First Sets of the grammar
        for (i = 0 + jm; i < n; i++) {
            int lark = 0, chk = 0;
            for (lark = 0; lark < point2; lark++) {
                if (first[i] == calc_first[point1][lark]) {
                    chk = 1;
                    break;
                }
            }
            if (chk == 0) {
                printf("%c, ", first[i]);
                calc_first[point1][point2++] = first[i];
            }
        }
        printf("}\n");
        jm = n;
        point1++;
    }

    printf("\n");
    printf("-----------------------------------------------\n\n");

    char donee[count];
    ptr = -1;

    // Initializing the calc_follow array
    for (k = 0; k < count; k++) {
        for (kay = 0; kay < 100; kay++) {
            calc_follow[k][kay] = '!';
        }
    }

    point1 = 0;
    int land = 0;
    for (e = 0; e < count; e++) {
        ck = production[e][0];
        point2 = 0;
        xxx = 0;
        // Checking if Follow of ck
        // has already been calculated
        for (kay = 0; kay <= ptr; kay++)
            if (ck == donee[kay])
                xxx = 1;
        if (xxx == 1)
            continue;
        land += 1;
        // Function call
        follow(ck);
        ptr += 1;
        // Adding ck to the calculated list
        donee[ptr] = ck;
        printf(" Follow(%c) = { ", ck);
        calc_follow[point1][point2++] = ck;
        // Printing the Follow Sets of the grammar
        for (i = 0 + km; i < m; i++) {
            int lark = 0, chk = 0;
            for (lark = 0; lark < point2; lark++) {
                if (f[i] == calc_follow[point1][lark]) {
                    chk = 1;
                    break;
                }
            }
            if (chk == 0) {
                printf("%c, ", f[i]);
                calc_follow[point1][point2++] = f[i];
            }
        }
        printf(" }\n\n");
        km = m;
        point1++;
    }

    return 0;
}

void follow(char c)
{
    int i, j;
    // Adding "$" to the follow
    // set of the start symbol
    if (production[0][0] == c) {
        f[m++] = '$';
    }
    for (i = 0; i < 10; i++) {
        for (j = 2; j < 10; j++) {
            if (production[i][j] == c) {
                if (production[i][j + 1] != '\0') {
                    // Calculate the first of the next
                    // Non-Terminal in the production
                    followfirst(production[i][j + 1], i, (j + 2));
                }
                if (production[i][j + 1] == '\0' && c != production[i][0]) {
                    // Calculate the follow of the
                    // Non-Terminal in the L.H.S. of the
                    // production
                    follow(production[i][0]);
                }
            }
        }
    }
}

void findfirst(char c, int q1, int q2)
{
    int j;
    // The case where we
    // encounter a Terminal
    if (!(isupper(c))) {
        first[n++] = c;
    }
    for (j = 0; j < count; j++) {
        if (production[j][0] == c) {
            if (production[j][2] == '#') {
                if (production[q1][q2] == '\0')
                    first[n++] = '#';
                else if (production[q1][q2] != '\0' && (q1 != 0 || q2 != 0)) {
                    // Recursion to calculate First of New
                    // Non-Terminal we encounter after
                    // epsilon
                    findfirst(production[q1][q2], q1, (q2 + 1));
                } else
                    first[n++] = '#';
            } else if (!isupper(production[j][2])) {
                first[n++] = production[j][2];
            } else {
                // Recursion to calculate First of
                // New Non-Terminal we encounter
                // at the beginning
                findfirst(production[j][2], j, 3);
            }
        }
    }
}

void followfirst(char c, int c1, int c2)
{
    int k;
    // The case where we encounter
    // a Terminal
    if (!(isupper(c)))
        f[m++] = c;
    else {
        int i = 0, j = 1;
        for (i = 0; i < count; i++) {
            if (calc_first[i][0] == c)
                break;
        }
        // Including the First set of the
        // Non-Terminal in the Follow of
        // the original query
        while (calc_first[i][j] != '!') {
            if (calc_first[i][j] != '#') {
                f[m++] = calc_first[i][j];
            } else {
                if (production[c1][c2] == '\0') {
                    // Case where we reach the
                    // end of a production
                    follow(production[c1][0]);
                } else {
                    // Recursion to the next symbol
                    // in case we encounter a "#"
                    followfirst(production[c1][c2], c1, c2 + 1);
                }
            }
            j++;
        }
    }
}


└─$ ./exp11comp

 First(X) = { q, n, o, p, #, }

 First(T) = { q, #, }

 First(S) = { p, #, }

 First(R) = { o, p, q, #, }

-----------------------------------------------

 Follow(X) = { $,  }

 Follow(T) = { n, m,  }

 Follow(S) = { $, q, m,  }

 Follow(R) = { m,  }
